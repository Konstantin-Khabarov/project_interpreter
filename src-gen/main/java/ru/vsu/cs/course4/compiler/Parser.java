/* Parser.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. Parser.java */
package ru.vsu.cs.course4.compiler;

import java.util.*;

import ru.vsu.cs.course4.compiler.ast.*;

public class Parser implements ParserConstants {

  final public ArrayNode array() throws ParseException {List<ExprNode> elements = new ArrayList<>(); ExprNode e;
    jj_consume_token(LBRACK);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case IDENT:
    case LRNDBR:
    case MINUS:
    case LBRACK:
    case EXCLAM:
    case INCREM:
    case DECREM:{
      e = expr();
elements.add(e);
      label_1:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        e = expr();
elements.add(e);
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(RBRACK);
{if ("" != null) return new ArrayNode(elements);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode value() throws ParseException {Token val = null; ArrayNode arr;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT_VALUE:{
      val = jj_consume_token(INT_VALUE);
      break;
      }
    case FLOAT_VALUE:{
      val = jj_consume_token(FLOAT_VALUE);
      break;
      }
    case STRING_VALUE:{
      val = jj_consume_token(STRING_VALUE);
      break;
      }
    case TRUE:{
      val = jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      val = jj_consume_token(FALSE);
      break;
      }
    case LBRACK:{
      arr = array();
{if ("" != null) return arr;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new ValueNode(val.image);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public IdentNode ident() throws ParseException {Token ident;
    ident = jj_consume_token(IDENT);
{if ("" != null) return new IdentNode(ident.image);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public List<ExprNode> callParams() throws ParseException {List<ExprNode> params = new ArrayList<>(); ExprNode e;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case IDENT:
    case LRNDBR:
    case MINUS:
    case LBRACK:
    case EXCLAM:
    case INCREM:
    case DECREM:{
      e = expr();
params.add(e);
      label_2:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        e = expr();
params.add(e);
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return params;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public FuncCallNode funcCall() throws ParseException {IdentNode ident; List<ExprNode> params;
    ident = ident();
    jj_consume_token(LRNDBR);
    params = callParams();
    jj_consume_token(RRNDBR);
{if ("" != null) return new FuncCallNode(ident, params);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode group() throws ParseException {ExprNode e;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case LBRACK:{
      e = value();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      if (jj_2_1(2)) {
        e = funcCall();
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case IDENT:{
          e = ident();
          break;
          }
        case LRNDBR:{
          jj_consume_token(LRNDBR);
          e = expr();
          jj_consume_token(RRNDBR);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return e;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode arrItem() throws ParseException {ExprNode arr, index;
    arr = group();
    label_3:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case LBRACK:{
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(LBRACK);
      index = expr();
      jj_consume_token(RBRACK);
arr = new ArrayAccessNode(arr, index);
    }
{if ("" != null) return arr;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode logicalNot() throws ParseException {ExprNode arg;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case EXCLAM:{
      jj_consume_token(EXCLAM);
      arg = arrItem();
{if ("" != null) return new UnaryOpNode("!", arg);}
      break;
      }
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case IDENT:
    case LRNDBR:
    case LBRACK:{
      arg = arrItem();
{if ("" != null) return arg;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode opposite() throws ParseException {ExprNode arg;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      arg = logicalNot();
{if ("" != null) return new UnaryOpNode("-", arg);}
      break;
      }
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case IDENT:
    case LRNDBR:
    case LBRACK:
    case EXCLAM:{
      arg = logicalNot();
{if ("" != null) return arg;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode increment() throws ParseException {ExprNode arg;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INCREM:{
      jj_consume_token(INCREM);
      arg = opposite();
{if ("" != null) return new UnaryOpNode("++", arg);}
      break;
      }
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case IDENT:
    case LRNDBR:
    case MINUS:
    case LBRACK:
    case EXCLAM:{
      arg = opposite();
{if ("" != null) return arg;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode decrement() throws ParseException {ExprNode arg;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case DECREM:{
      jj_consume_token(DECREM);
      arg = increment();
{if ("" != null) return new UnaryOpNode("--", arg);}
      break;
      }
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case IDENT:
    case LRNDBR:
    case MINUS:
    case LBRACK:
    case EXCLAM:
    case INCREM:{
      arg = increment();
{if ("" != null) return arg;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode mult() throws ParseException {ExprNode arg1; ExprNode arg2; Token op;
    arg1 = decrement();
    label_4:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case STAR:
      case SLASH:
      case PERCENT:{
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case STAR:{
        op = jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        op = jj_consume_token(SLASH);
        break;
        }
      case PERCENT:{
        op = jj_consume_token(PERCENT);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg2 = decrement();
arg1 = new BinaryOpNode(op.image, arg1, arg2);
    }
{if ("" != null) return arg1;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode add() throws ParseException {ExprNode arg1; ExprNode arg2; Token op;
    arg1 = mult();
    label_5:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PLUS:
      case MINUS:{
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg2 = mult();
arg1 = new BinaryOpNode(op.image, arg1, arg2);
    }
{if ("" != null) return arg1;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode comparison() throws ParseException {ExprNode arg1; ExprNode arg2; Token op;
    arg1 = add();
    label_6:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:{
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 37:{
        op = jj_consume_token(37);
        break;
        }
      case 38:{
        op = jj_consume_token(38);
        break;
        }
      case 39:{
        op = jj_consume_token(39);
        break;
        }
      case 40:{
        op = jj_consume_token(40);
        break;
        }
      case 41:{
        op = jj_consume_token(41);
        break;
        }
      case 42:{
        op = jj_consume_token(42);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg2 = add();
arg1 = new BinaryOpNode(op.image, arg1, arg2);
    }
{if ("" != null) return arg1;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode logicalAnd() throws ParseException {ExprNode arg1; ExprNode arg2; Token op;
    arg1 = comparison();
    label_7:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 43:{
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      op = jj_consume_token(43);
      arg2 = comparison();
arg1 = new BinaryOpNode(op.image, arg1, arg2);
    }
{if ("" != null) return arg1;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode logicalOr() throws ParseException {ExprNode arg1; ExprNode arg2; Token op;
    arg1 = logicalAnd();
    label_8:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 44:{
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      op = jj_consume_token(44);
      arg2 = logicalAnd();
arg1 = new BinaryOpNode(op.image, arg1, arg2);
    }
{if ("" != null) return arg1;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExprNode expr() throws ParseException {ExprNode r;
    r = logicalOr();
{if ("" != null) return r;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public StmtNode stmt1() throws ParseException {ExprNode ident; ExprNode expr; StmtNode stmt;
    if (jj_2_2(2)) {
      stmt = funcCall();
    } else {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case INT_VALUE:
      case FLOAT_VALUE:
      case STRING_VALUE:
      case TRUE:
      case FALSE:
      case IDENT:
      case LRNDBR:
      case LBRACK:{
        ident = arrItem();
        jj_consume_token(EQUALS);
        expr = expr();
stmt = new AssignNode(ident, expr);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        expr = expr();
stmt = new ReturnNode(expr);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return stmt;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public IfNode ifStmt() throws ParseException {ExprNode cond; StmtNode thenStmt; StmtNode elseStmt = null;
    jj_consume_token(IF);
    jj_consume_token(LRNDBR);
    cond = expr();
    jj_consume_token(RRNDBR);
    thenStmt = stmt();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseStmt = stmt();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
{if ("" != null) return new IfNode(cond, thenStmt, elseStmt);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public WhileNode whileStmt() throws ParseException {ExprNode cond; StmtNode bodyStmt = null;
    jj_consume_token(WHILE);
    jj_consume_token(LRNDBR);
    cond = expr();
    jj_consume_token(RRNDBR);
    bodyStmt = stmt();
{if ("" != null) return new WhileNode(cond, bodyStmt);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ForNode forStmt() throws ParseException {StmtNode init; ExprNode cond; StmtNode iterStmt; StmtNode bodyStmt = null;
    jj_consume_token(FOR);
    jj_consume_token(LRNDBR);
    init = stmt1();
    jj_consume_token(SEMI);
    cond = expr();
    jj_consume_token(SEMI);
    iterStmt = stmt1();
    jj_consume_token(RRNDBR);
    bodyStmt = stmt();
{if ("" != null) return new ForNode(init, cond, iterStmt, bodyStmt);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public List<IdentNode> declParams() throws ParseException {List<IdentNode> params = new ArrayList<>(); IdentNode p;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case IDENT:{
      p = ident();
params.add(p);
      label_9:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        p = ident();
params.add(p);
      }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
{if ("" != null) return params;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public FuncDeclNode funcDecl() throws ParseException {IdentNode ident; List<IdentNode> params; StmtNode body;
    jj_consume_token(DEF);
    ident = ident();
    jj_consume_token(LRNDBR);
    params = declParams();
    jj_consume_token(RRNDBR);
    jj_consume_token(LCURBR);
    body = stmtList();
    jj_consume_token(RCURBR);
{if ("" != null) return new FuncDeclNode(ident, params, body);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public StmtNode stmt2() throws ParseException {StmtNode stmt;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case LCURBR:{
      jj_consume_token(LCURBR);
      stmt = stmtList();
      jj_consume_token(RCURBR);
      break;
      }
    case IF:{
      stmt = ifStmt();
      break;
      }
    case WHILE:{
      stmt = whileStmt();
      break;
      }
    case FOR:{
      stmt = forStmt();
      break;
      }
    case DEF:{
      stmt = funcDecl();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return stmt;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public StmtNode stmt() throws ParseException {StmtNode stmt;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT_VALUE:
    case FLOAT_VALUE:
    case STRING_VALUE:
    case TRUE:
    case FALSE:
    case RETURN:
    case IDENT:
    case LRNDBR:
    case LBRACK:{
      stmt = stmt1();
      jj_consume_token(SEMI);
      break;
      }
    case IF:
    case WHILE:
    case FOR:
    case DEF:
    case LCURBR:{
      stmt = stmt2();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return stmt;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public StmtNode stmtList() throws ParseException {List<StmtNode> list = new ArrayList<>();
    label_10:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case INT_VALUE:
      case FLOAT_VALUE:
      case STRING_VALUE:
      case IF:
      case WHILE:
      case FOR:
      case DEF:
      case TRUE:
      case FALSE:
      case RETURN:
      case IDENT:
      case LRNDBR:
      case LCURBR:
      case LBRACK:{
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
StmtNode stmt;
      stmt = stmt();
list.add(stmt);
    }
{if ("" != null) return new StmtListNode(list);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public StmtNode program() throws ParseException {StmtNode program;
    program = stmtList();
    jj_consume_token(0);
{if ("" != null) return program;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public AstNode start() throws ParseException {StmtNode program;
    program = program();
{if ("" != null) return program;}
    throw new IllegalStateException ("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(LRNDBR)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x100000,0x84b04c0,0x304c0,0x100000,0x84b04c0,0x304c0,0x480000,0x0,0x4b04c0,0x84b04c0,0x84b04c0,0x84b04c0,0x70000000,0x70000000,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0x4f04c0,0x1000,0x100000,0x80000,0x100e800,0x14fecc0,0x14fecc0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x1d,0x1,0x0,0x1d,0x1,0x0,0x1,0x5,0x5,0xd,0x1d,0x0,0x0,0x0,0x0,0x7e0,0x7e0,0x800,0x1000,0x1,0x0,0x0,0x0,0x0,0x1,0x1,};
	}
  private final JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /**
   * Constructor with InputStream.
   * @param stream input stream
   */
  public Parser(final java.io.InputStream stream) {
	  this(stream, null);
  }

  /**
   * Constructor with InputStream and supplied encoding
   * @param stream input stream
   * @param encoding charset to be used
   */
  public Parser(final java.io.InputStream stream, final String encoding) {
   try {
     jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
   } catch(final java.io.UnsupportedEncodingException e) {
     throw new IllegalStateException(e);
   }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param stream input stream
   */
  public void ReInit(final java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /**
   * Reinitialise
   * @param stream input stream
   * @param encoding charset to be used
   */
  public void ReInit(final java.io.InputStream stream, final String encoding) {
	  try {
      jj_input_stream.reInit(stream, encoding, 1, 1);
    } catch(final java.io.UnsupportedEncodingException e) { 
      throw new IllegalStateException(e);
    }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public Parser(final java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 27; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final java.io.Reader stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 27; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public Parser(final ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  private static final class LookaheadSuccess extends IllegalStateException {}
  private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		   jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		   jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
  if (pos >= 100) {
    return;
  }

  if (pos == jj_endpos + 1) {
    jj_lasttokens[jj_endpos++] = kind;
  } else if (jj_endpos != 0) {
    jj_expentry = new int[jj_endpos];

    for (int i = 0; i < jj_endpos; i++) {
      jj_expentry[i] = jj_lasttokens[i];
    }

    for (final int[] oldentry : jj_expentries) {
      if (oldentry.length == jj_expentry.length) {
        boolean isMatched = true;
        for (int i = 0; i < jj_expentry.length; i++) {
          if (oldentry[i] != jj_expentry[i]) {
            isMatched = false;
            break;
          }
        }
        if (isMatched) {
          jj_expentries.add(jj_expentry);
          break;
        }
      }
    }

    if (pos != 0) {
      jj_endpos = pos;
      jj_lasttokens[jj_endpos - 1] = kind;
    }
  }
}

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /**
   * @return Always <code>false</code>.
   */
  public final boolean trace_enabled() {
    return false;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      try {
        JJCalls p = jj_2_rtns[i];
        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_scanpos = p.first;
            jj_lastpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
            }
          }
          p = p.next;
        } while (p != null);
      } catch(LookaheadSuccess ls) { /* ignore */ }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p.next = new JJCalls();
        p = p.next;
        break;
      }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
